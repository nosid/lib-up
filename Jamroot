project
    : requirements
      <threading>multi
      # common
      <cflags>-Wall
      <cflags>-Wextra
      <cflags>-Werror
      <cflags>-Wcast-align # recommended by "Secure C++ Programming"
      <cflags>-Wstrict-overflow # recommended by "Secure C++ Programming"
      <cflags>-Woverloaded-virtual # recommended by "Secure C++ Programming"
      <cflags>-Wreorder # recommended by "Secure C++ Programming"
      <cflags>-march=native
      <cxxflags>-std=c++1z
      # Workaround: Clang no longer supports -finline-functions (enabled on inlining=full
      <variant>release:<inlining>on
      # GCC
      <toolset>gcc:<cflags>-Wsuggest-attribute=noreturn
      <toolset>gcc:<cflags>-Wunused-but-set-parameter
      <toolset>gcc:<cflags>-Wunused-but-set-variable
      <toolset>gcc:<cflags>-Wtrampolines # recommended by "Secure C++ Programming"
      <toolset>gcc:<cflags>-fdiagnostics-color
      <toolset>gcc:<cflags>-flto
      <toolset>gcc:<cflags>-grecord-gcc-switches
      <toolset>gcc:<cxxflags>-Wnoexcept
      <toolset>gcc:<cxxflags>-Wzero-as-null-pointer-constant
      <toolset>gcc:<cxxflags>-Wnon-virtual-dtor
      <toolset>gcc:<linkflags>-Wsuggest-final-types
      <toolset>gcc:<linkflags>-Wsuggest-final-methods
      <toolset>gcc:<linkflags>-Wodr
      <toolset>gcc:<cflags>-include\ workaround_gcc.hpp
      # CLANG
      <toolset>clang:<cxxflags>-stdlib=libc++
      <toolset>clang:<linkflags>-stdlib=libc++
      <toolset>clang:<include>/usr/include/libcxxabi
      <toolset>clang:<cflags>-fdiagnostics-color
      <toolset>clang:<cflags>-include\ workaround_clang.hpp
      # With Clang it is possible to enable all warnings and then
      # selectively disable a few of them. More static code analysis
      # might lead to better code quality. Initially, I have disabled
      # all additional warnings which prevented compiling the code.
      # TODO: Selectively re-enable useful warnings.
      <toolset>clang:<cflags>-Weverything
      <toolset>clang:<cflags>-Wno-c++98-compat
      <toolset>clang:<cflags>-Wno-c++98-compat-pedantic
      <toolset>clang:<cflags>-Wno-c99-extensions
      <toolset>clang:<cflags>-Wno-conversion
      <toolset>clang:<cflags>-Wno-covered-switch-default
      <toolset>clang:<cflags>-Wno-deprecated
      <toolset>clang:<cflags>-Wno-documentation-unknown-command
      <toolset>clang:<cflags>-Wno-double-promotion
      <toolset>clang:<cflags>-Wno-exit-time-destructors
      <toolset>clang:<cflags>-Wno-format-nonliteral
      <toolset>clang:<cflags>-Wno-global-constructors
      <toolset>clang:<cflags>-Wno-gnu-anonymous-struct
      <toolset>clang:<cflags>-Wno-padded
      <toolset>clang:<cflags>-Wno-reserved-id-macro
      <toolset>clang:<cflags>-Wno-shadow
      <toolset>clang:<cflags>-Wno-sign-conversion
      <toolset>clang:<cflags>-Wno-switch-enum
      <toolset>clang:<cflags>-Wno-unreachable-code-loop-increment
      <toolset>clang:<cflags>-Wno-unused-member-function
      <toolset>clang:<cflags>-Wno-used-but-marked-unused
      <toolset>clang:<cflags>-Wno-weak-vtables
    : build-dir bin/
    ;

build-project src ;
build-project test ;
build-project examples ;
